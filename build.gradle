plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
}

group = 'com.unit'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'

	// security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'


	// Actuator
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	// Querydsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}


def jacocoDir = layout.buildDirectory.dir("reports/")

def QDomains = []
for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
	QDomains.add(qPattern + '*')
}

def jacocoExcludePatterns = [
		// 측정 안하고 싶은 패턴
		"**/*Application*",
		"**/*Config*",
		"**/*Exception*",
		"**/*Request*",
		"**/*Response*",
		"**/*Dto*",
		"**/*Interceptor*",
		"**/*Filter*",
		"**/*Resolver*",
		"**/*Entity*",
		"**/*Error*/**",
		"**/test/**",
		"**/resources/**",
		"**/error/**",
		"**/config/**"
]

jacoco {
	toolVersion = "0.8.8"
}

jacocoTestReport {
	dependsOn test
	reports {
		html.required.set(true)
		xml.required.set(true)
		csv.required.set(true)
		html.destination jacocoDir.get().file("jacoco/index.html").asFile
		xml.destination jacocoDir.get().file("jacoco/index.xml").asFile
		csv.destination jacocoDir.get().file("jacoco/index.csv").asFile
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: jacocoExcludePatterns + QDomains) // Querydsl 관련 제거
				})
		)
	}
	finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {

	violationRules {
		rule {
			// rule 활성화
			enabled = true

			// 클래스 단위로 룰 체크
			element = 'CLASS'

			// 라인 커버리지를 최소 80% 만족
//            limit {
//                counter = 'LINE'
//                value = 'COVEREDRATIO'
//                minimum = 0.80
//            }

			excludes = jacocoExcludePatterns + QDomains
		}
	}
}
